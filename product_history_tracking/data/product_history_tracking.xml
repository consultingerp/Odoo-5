<?xml version="1.0" encoding='UTF-8'?>
<odoo>
    <record id="product_history_initial_setup" model="ir.cron">
        <field name="name">Product History Setup</field>
        <field name="model_id" ref="model_product_template"/>
        <field name="state">code</field>
        <field name="code">env.cr.execute("""UPDATE product_template SET previous_list_price = list_price;""")</field>
        <field name="interval_number">15</field>
        <field name="interval_type">minutes</field>
        <field name="numbercall">1</field>
        <field name="doall" eval="False"/>
    </record>

    <record id="product_history_tracking" model="base.automation">
        <field name="name">Product Template History Tracking</field>
        <field name="model_id" ref="model_product_template"/>
        <field name="state">code</field>
        <field name="trigger">on_create_or_write</field>
        <field name="active" eval="True"/>
        <field name="code">
if round(record['list_price'],2) != round(record['previous_list_price'],2):
  data_history = {
    'list_price' : record['list_price'],
    'previous_list_price' : record['previous_list_price'],
    'standard_price' : record['standard_price'], #Maintain consistency; this value is updated directly in the overriden function
    'previous_standard_price' : record['standard_price'], #See above
    'modified_date' : datetime.date.today(),
    'modified_datetime' : datetime.datetime.now(),
    'product' : record['id'],
    'user' : env.user.id
  }
  
  data = {
    'previous_list_price' : record['list_price'],
  }
  
  env['product.history.tracking'].create(data_history)
  record.write(data)
        </field>
    </record>
</odoo>